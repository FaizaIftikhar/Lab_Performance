#Lab performance 4 code: -
class node:
    def __init__(self, data=None):
        self.data = data
        self.next = None
class linkedlist: #making class "linkedlist"
    def __init__(self):
        self.head = node()
  
    def append(self, data):
        if self.head.data == None:
            self.head.data = data
        else:
            new_node = node(data)
            curr = self.head
        while curr.next!=None:
            curr = curr.next
        curr.next = new_node

    def add_before(self, data):
        if self.head.data == None:
            self.head.data = data
        else:
            new_node = node(data)
            curr = self.head
            self.head = new_node
            self.head.next = curr
  
    
    def display(self):
        curr = self.head
        dis = []
        while curr.next!=None:
            curr = curr.next
            dis.append(curr.data)
        print(dis)
  
    def delete(self):
        curr = self.head
        while curr.next.next:
            scnd_last = curr.next
            curr = curr.next
        curr.next = None

    def insert(self , data , index):
        if self.head.data == None:
            self.head.data = data
        else:
            new_node = node(data)
            curr = self.head
        if index == 0: #inserting at any index
            new_node.next = self.head
            self.head = new_node
        count = 0
        curr = self.head
        while curr is not None: 
            if count == index-1:
                new_node.next = curr.next
                curr.next = new_node
                break
            #print("curr:" , curr)
            curr = curr.next
            count= count + 1

    def length(self): 
        len = 0
        curr = self.head
        if self.head!= None:
            len = 1
        while curr.next!= None:
            len = len +1
            curr = curr.next
        print(len)
